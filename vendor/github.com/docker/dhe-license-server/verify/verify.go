package verify

import (
	"crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
)

// All of the functions in this file assume that they are receiving a properly
// formatted private key.

// CheckToken performs a MAC algorithm (where token is generated by hashing the
// message with the privateKey via GenerateToken) with the purpose of authenticating
// the validity of both the message and the private key of the person who generated
// the token.
func CheckToken(message, token, privateKey string) (bool, error) {
	tokenBytes, err := base64.URLEncoding.DecodeString(token)
	if err != nil {
		return false, err
	}

	generatedToken, err := GenerateToken(message, privateKey)
	if err != nil {
		return false, err
	}

	generatedBytes, err := base64.URLEncoding.DecodeString(generatedToken)
	if err != nil {
		return false, err
	}

	return hmac.Equal(tokenBytes, generatedBytes), nil
}

// GenerateToken generates a hash of the message with the privateKey via the
// sha256 algorithm.
func GenerateToken(message, privateKey string) (string, error) {
	key, err := base64.URLEncoding.DecodeString(privateKey)
	if err != nil {
		return "", err
	}

	h := hmac.New(sha256.New, key)
	h.Write([]byte(message))
	return base64.URLEncoding.EncodeToString(h.Sum(nil)), nil
}
