// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/docker/dhe-deploy/pkg/jobrunner-framework/worker (interfaces: Executor)

package worker

import (
	context "github.com/docker/distribution/context"
	gomock "github.com/vikstrous/mock/gomock"
	io "io"
	time "time"
)

// Mock of Executor interface
type MockExecutor struct {
	ctrl     *gomock.Controller
	recorder *_MockExecutorRecorder
}

// Recorder for MockExecutor (not exported)
type _MockExecutorRecorder struct {
	mock *MockExecutor
}

func NewMockExecutor(ctrl *gomock.Controller) *MockExecutor {
	mock := &MockExecutor{ctrl: ctrl}
	mock.recorder = &_MockExecutorRecorder{mock}
	return mock
}

func (_m *MockExecutor) EXPECT() *_MockExecutorRecorder {
	return _m.recorder
}

func (_m *MockExecutor) Cancel(_param0 string) {
	_m.ctrl.Call(_m, "Cancel", _param0)
}

func (_mr *_MockExecutorRecorder) Cancel(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Cancel", arg0)
}

func (_m *MockExecutor) Start(_param0 context.Context, _param1 string, _param2 []string, _param3 map[string]string, _param4 time.Duration) (io.Reader, error) {
	ret := _m.ctrl.Call(_m, "Start", _param0, _param1, _param2, _param3, _param4)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockExecutorRecorder) Start(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Start", arg0, arg1, arg2, arg3, arg4)
}

func (_m *MockExecutor) Wait() error {
	ret := _m.ctrl.Call(_m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockExecutorRecorder) Wait() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Wait")
}
