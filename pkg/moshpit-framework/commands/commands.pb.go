// Code generated by protoc-gen-go.
// source: commands/commands.proto
// DO NOT EDIT!

/*
Package commands is a generated protocol buffer package.

It is generated from these files:
	commands/commands.proto

It has these top-level messages:
	JobInstance
	Status
	JobConfig
*/
package commands

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type JobState int32

const (
	JobState_RUNNING JobState = 0
	JobState_SUCCESS JobState = 1
	JobState_FAILURE JobState = 2
)

var JobState_name = map[int32]string{
	0: "RUNNING",
	1: "SUCCESS",
	2: "FAILURE",
}
var JobState_value = map[string]int32{
	"RUNNING": 0,
	"SUCCESS": 1,
	"FAILURE": 2,
}

func (x JobState) String() string {
	return proto.EnumName(JobState_name, int32(x))
}
func (JobState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type JobInstance struct {
	Uuid   string   `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	State  JobState `protobuf:"varint,2,opt,name=state,enum=commands.JobState" json:"state,omitempty"`
	Length uint64   `protobuf:"varint,3,opt,name=length" json:"length,omitempty"`
	Error  string   `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
}

func (m *JobInstance) Reset()                    { *m = JobInstance{} }
func (m *JobInstance) String() string            { return proto.CompactTextString(m) }
func (*JobInstance) ProtoMessage()               {}
func (*JobInstance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Status struct {
	Client string         `protobuf:"bytes,1,opt,name=client" json:"client,omitempty"`
	Jobs   []*JobInstance `protobuf:"bytes,2,rep,name=jobs" json:"jobs,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Status) GetJobs() []*JobInstance {
	if m != nil {
		return m.Jobs
	}
	return nil
}

type JobConfig struct {
	Uuid string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	// This is a yaml file the client must parse
	MoshConfig string `protobuf:"bytes,2,opt,name=mosh_config,json=moshConfig" json:"mosh_config,omitempty"`
}

func (m *JobConfig) Reset()                    { *m = JobConfig{} }
func (m *JobConfig) String() string            { return proto.CompactTextString(m) }
func (*JobConfig) ProtoMessage()               {}
func (*JobConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func init() {
	proto.RegisterType((*JobInstance)(nil), "commands.JobInstance")
	proto.RegisterType((*Status)(nil), "commands.Status")
	proto.RegisterType((*JobConfig)(nil), "commands.JobConfig")
	proto.RegisterEnum("commands.JobState", JobState_name, JobState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Mosher service

type MosherClient interface {
	// This call is initiated by the client. It tells the server it's ready
	// with a Status message
	Register(ctx context.Context, opts ...grpc.CallOption) (Mosher_RegisterClient, error)
}

type mosherClient struct {
	cc *grpc.ClientConn
}

func NewMosherClient(cc *grpc.ClientConn) MosherClient {
	return &mosherClient{cc}
}

func (c *mosherClient) Register(ctx context.Context, opts ...grpc.CallOption) (Mosher_RegisterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Mosher_serviceDesc.Streams[0], c.cc, "/commands.Mosher/Register", opts...)
	if err != nil {
		return nil, err
	}
	x := &mosherRegisterClient{stream}
	return x, nil
}

type Mosher_RegisterClient interface {
	Send(*Status) error
	Recv() (*JobConfig, error)
	grpc.ClientStream
}

type mosherRegisterClient struct {
	grpc.ClientStream
}

func (x *mosherRegisterClient) Send(m *Status) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mosherRegisterClient) Recv() (*JobConfig, error) {
	m := new(JobConfig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Mosher service

type MosherServer interface {
	// This call is initiated by the client. It tells the server it's ready
	// with a Status message
	Register(Mosher_RegisterServer) error
}

func RegisterMosherServer(s *grpc.Server, srv MosherServer) {
	s.RegisterService(&_Mosher_serviceDesc, srv)
}

func _Mosher_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MosherServer).Register(&mosherRegisterServer{stream})
}

type Mosher_RegisterServer interface {
	Send(*JobConfig) error
	Recv() (*Status, error)
	grpc.ServerStream
}

type mosherRegisterServer struct {
	grpc.ServerStream
}

func (x *mosherRegisterServer) Send(m *JobConfig) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mosherRegisterServer) Recv() (*Status, error) {
	m := new(Status)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Mosher_serviceDesc = grpc.ServiceDesc{
	ServiceName: "commands.Mosher",
	HandlerType: (*MosherServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _Mosher_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x51, 0xcd, 0x4f, 0xbb, 0x40,
	0x14, 0x2c, 0x6d, 0xe1, 0x07, 0x8f, 0xe4, 0x17, 0xb2, 0x7e, 0x11, 0x2f, 0x1a, 0x4e, 0xe8, 0xa1,
	0x2a, 0x1e, 0xbc, 0xda, 0x90, 0x6a, 0xf0, 0x83, 0xc3, 0x12, 0xce, 0xa6, 0xd0, 0x95, 0x62, 0xca,
	0xae, 0x61, 0x97, 0x83, 0xff, 0xbd, 0xbb, 0x0b, 0x68, 0x9a, 0x78, 0x7b, 0xf3, 0x76, 0xe6, 0xcd,
	0x4c, 0x16, 0x4e, 0x4a, 0xd6, 0x34, 0x6b, 0xba, 0xe1, 0x57, 0xe3, 0xb0, 0xf8, 0x6c, 0x99, 0x60,
	0xc8, 0x1e, 0x71, 0xf0, 0x05, 0xee, 0x13, 0x2b, 0x12, 0xca, 0xc5, 0x9a, 0x96, 0x04, 0x21, 0x98,
	0x77, 0x5d, 0xbd, 0xf1, 0x8d, 0x73, 0x23, 0x74, 0xb0, 0x9e, 0x51, 0x08, 0xa6, 0x7c, 0x15, 0xc4,
	0x9f, 0xca, 0xe5, 0xff, 0x08, 0x2d, 0x7e, 0x8e, 0x49, 0x65, 0xa6, 0x5e, 0x70, 0x4f, 0x40, 0xc7,
	0x60, 0xed, 0x08, 0xad, 0xc4, 0xd6, 0x9f, 0x49, 0xea, 0x1c, 0x0f, 0x08, 0x1d, 0x82, 0x49, 0xda,
	0x96, 0xb5, 0xbe, 0xa9, 0xcf, 0xf6, 0x20, 0x78, 0x06, 0x4b, 0xa9, 0x3b, 0xae, 0x74, 0xe5, 0xae,
	0x26, 0x54, 0x0c, 0xbe, 0x03, 0x42, 0x17, 0x30, 0xff, 0x60, 0x05, 0x97, 0xc6, 0xb3, 0xd0, 0x8d,
	0x8e, 0xf6, 0x8c, 0xc7, 0xc8, 0x58, 0x53, 0x82, 0x7b, 0x70, 0xe4, 0x32, 0x66, 0xf4, 0xbd, 0xae,
	0xfe, 0x6c, 0x71, 0x06, 0x6e, 0xc3, 0xf8, 0xf6, 0xad, 0xd4, 0x14, 0xdd, 0xc5, 0xc1, 0xa0, 0x56,
	0xbd, 0xe8, 0xf2, 0x06, 0xec, 0xb1, 0x0f, 0x72, 0xe1, 0x1f, 0xce, 0xd3, 0x34, 0x49, 0x1f, 0xbd,
	0x89, 0x02, 0x59, 0x1e, 0xc7, 0xab, 0x2c, 0xf3, 0x0c, 0x05, 0x1e, 0x96, 0xc9, 0x4b, 0x8e, 0x57,
	0xde, 0x34, 0x5a, 0x82, 0xf5, 0x2a, 0x0f, 0x90, 0x16, 0xdd, 0x81, 0x8d, 0x49, 0x55, 0x73, 0x21,
	0x67, 0xef, 0x37, 0x67, 0xdf, 0xef, 0xf4, 0x60, 0x2f, 0x79, 0xef, 0x17, 0x4c, 0x42, 0xe3, 0xda,
	0x28, 0x2c, 0xfd, 0x21, 0xb7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x83, 0xd3, 0x95, 0x43, 0xab,
	0x01, 0x00, 0x00,
}
