package commands

import (
	"fmt"

	"github.com/docker/dhe-deploy/bootstrap/backup"
	"github.com/docker/dhe-deploy/bootstrap/dumpcerts"
	"github.com/docker/dhe-deploy/bootstrap/flags"
	"github.com/docker/dhe-deploy/bootstrap/images"
	"github.com/docker/dhe-deploy/bootstrap/install"
	"github.com/docker/dhe-deploy/bootstrap/join"
	"github.com/docker/dhe-deploy/bootstrap/reconfigure"
	"github.com/docker/dhe-deploy/bootstrap/remove"
	"github.com/docker/dhe-deploy/bootstrap/restore"
	"github.com/docker/dhe-deploy/bootstrap/upgrade"

	"github.com/codegangsta/cli"
)

var Commands = []cli.Command{
	{
		Name:  "install",
		Usage: "Install Docker Trusted Registry on this Docker Engine",
		Description: `
This command installs DTR on the Docker Engine that runs the command.
After installing DTR, you can add more nodes to a DTR cluster with
the 'join' command.
`,
		UsageText: Usage("install"),
		Action:    install.Run,
		Flags:     flags.InstallFlags,
	},
	{
		Name:      "join",
		Usage:     "Add a new replica to an existing DTR cluster",
		ArgsUsage: Usage("join"),
		Description: `
This command installs DTR on the Docker Engine that runs the command,
and joins the new installation to an existing cluster.

To set up a cluster with high-availability, add 3, 5, or 7 nodes to
the cluster.
`,
		Action: join.Run,
		Flags:  flags.JoinFlags,
	},
	{
		Name:      "reconfigure",
		Usage:     "Change DTR configurations",
		UsageText: Usage("reconfigure"),
		Description: `
This command changes specified configurations for DTR and leaves
existing configurations in its original state.


WARNING: DTR is restarted for the new configurations to take
effect. To have no down time, configure your DTR for high-availability.
`,
		Action: reconfigure.Run,
		Flags:  flags.ReconfigureFlags,
	},
	{
		Name:      "remove",
		Usage:     "Remove a replica from a DTR cluster",
		UsageText: Usage("remove"),
		Description: `
This command removes a replica from the cluster, stops and removes all
DTR containers, and deletes all DTR volumes.
`,
		Action: remove.Run,
		Flags:  flags.RemoveFlags,
	},
	{
		Name:      "restore",
		Usage:     "Create a new DTR cluster from an existing backup",
		UsageText: Usage("restore"),
		Description: `
This command performs a fresh installation of DTR, and reconfigures it
with configuration data from a tar file generated by the 'backup' command.
The command starts by installing DTR, restores the configurations
stored on etcd, and then restores the repository metadata stored
on RethinkDB.

This command does not restore Docker images. You should implement a separate
restore procedure for the Docker images stored in your registry, taking in
consideration whether your DTR installation is configured to store images on
the filesystem or using a cloud provider.


After restoring DTR, you can add more nodes to the DTR cluster with
the 'join' command.
`,
		Action: restore.Run,
		Flags:  flags.RestoreFlags,
		//cli.StringFlag{
		//	Name:   "passphrase",
		//	Usage:  "Decrypt the tar file with the provided passphrase",
		//	EnvVar: "DTR_PASSPHRASE",
		//},
	},
	{
		Name:      "backup",
		Usage:     "Backup a DTR cluster to a tar file and stream it to stdout",
		UsageText: Usage("backup"),
		Description: `
This command creates a backup of configurations and image metadata, in a tar
file. It can be used to make periodic backups of a DTR installation.

This command only creates backups of configurations, and image metadata.
It does not backup the Docker images stored in your registry.

You should implement a separate backup policy for the Docker images stored
in your registry, taking in consideration whether your DTR installation is
configured to store images on the filesystem or using a cloud provider.

WARNING: This backup contains sensitive information and should be
stored securely.
`,
		Action: backup.Run,
		Flags:  flags.BackupFlags,
		//cli.StringFlag{
		//	Name:   "passphrase",
		//	Usage:  "Encrypt the tar file with the provided passphrase",
		//	EnvVar: "DTR_PASSPHRASE",
		//},
	},
	{
		Name:      "upgrade",
		Usage:     "Upgrade a v2.0.0 or later cluster to this version of DTR",
		UsageText: Usage("upgrade"),
		Description: `
This command upgrades an existing DTR 2.0.0 or later cluster to the current version of
this bootstrapper.
`,
		Action: upgrade.Run,
		Flags:  flags.UpgradeFlags,
	},
	{
		Name:      "dumpcerts",
		Usage:     "Dump out the TLS certificates used by this DTR instance",
		UsageText: Usage("dumpcerts"),
		Description: `
This command creates a backup of the certificates used by DTR for
communicating across replicas with TLS.
`,
		Action: dumpcerts.Run,
		Flags:  flags.DumpCertsFlags,
	},
	{
		Name:      "images",
		Usage:     "Lists all the images necessary to install DTR",
		UsageText: Usage("images"),
		Description: `
This command lists all the images necessary to install DTR.
`,
		Action: images.Run,
		Flags:  []cli.Flag{},
	},
}

// the only modification is adding UsageText as an alternative way to print usage
var CommandHelpTemplate = `NAME:
{{.Name}} - {{.Usage}}

USAGE:
 {{if .UsageText}}{{.UsageText}}{{else}}{{.HelpName}}{{if .Flags}} [command options]{{end}} {{if .ArgsUsage}}{{.ArgsUsage}}{{else}}[arguments...]{{end}}{{end}}{{if .Category}}

CATEGORY:
 {{.Category}}{{end}}{{if .Description}}

DESCRIPTION:
 {{.Description}}{{end}}{{if .Flags}}

OPTIONS:
 {{range .Flags}}{{.}}
 {{end}}{{ end }}`

func Usage(command string) string {
	var cmdTemplate string

	switch command {
	case "backup", "dumpcerts":
		cmdTemplate =
			`docker run -i --rm docker/dtr \
    %s [command options] > backup.tar`
	case "restore":
		cmdTemplate =
			`docker run -i --rm docker/dtr \
    %s [command options] < backup.tar`
	default:
		cmdTemplate =
			`docker run -it --rm docker/dtr \
    %s [command options]`
	}
	return fmt.Sprintf(cmdTemplate, command)
}
